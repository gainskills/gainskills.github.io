<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dictionary on Blog - uTIcARdI</title><link>https://blog.gainskills.top/tags/dictionary/</link><description>Recent content in Dictionary on Blog - uTIcARdI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gainskills.top/tags/dictionary/index.xml" rel="self" type="application/rss+xml"/><item><title>get() in get() method of Pyhon dict</title><link>https://blog.gainskills.top/2019/01/19/get-in-dict-get/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/19/get-in-dict-get/</guid><description>Write down the tip for the practice: The Time in Words.
A dict was created for the time in number format to string format:
intToStrDict = { 1: &amp;#39;one&amp;#39;, 2: &amp;#39;two&amp;#39;, 3: &amp;#39;three&amp;#39;, 4: &amp;#39;four&amp;#39;, 5: &amp;#39;five&amp;#39;, 6: &amp;#39;six&amp;#39;, 7: &amp;#39;seven&amp;#39;, 8: &amp;#39;eight&amp;#39;, 9: &amp;#39;nine&amp;#39;, 10: &amp;#39;ten&amp;#39;, 11: &amp;#39;eleven&amp;#39;, 12: &amp;#39;twelve&amp;#39;, 13: &amp;#39;thirteen&amp;#39;, 14: &amp;#39;fourteen&amp;#39;, 15: &amp;#39;quarter&amp;#39;, 16: &amp;#39;sixteen&amp;#39;, 17: &amp;#39;seventeen&amp;#39;, 18: &amp;#39;eighteen&amp;#39;, 19: &amp;#39;nineteen&amp;#39;, 20: &amp;#39;twenty&amp;#39;, 30: &amp;#39;half&amp;#39;, 40: &amp;#39;fourty&amp;#39;, 50: &amp;#39;fifty&amp;#39; } get() is a good way get the value of a key from the dict, so I tried following function to convert minute in number format to string format:</description></item><item><title>Loop a dict to update the keys</title><link>https://blog.gainskills.top/2016/07/21/loop-a-dict-to-update-key/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2016/07/21/loop-a-dict-to-update-key/</guid><description>Source dict:
{&amp;#39;keyA&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;keyB&amp;#39;: &amp;#39;&amp;#39;} Expected dict:
{‘keyA/&amp;#39;keyA&amp;#39; :’’, keyA/keyB’ : ‘’} Code1:
keyPrefix = &amp;#39;keyA&amp;#39; for key, value in Dict.items(): newkey = &amp;#39;/&amp;#39;.join([keyPrefix, key]) Dict[newkey] = Dict.pop(key) Code2:
keyPrefix = &amp;#39;keyA&amp;#39; for key, value in Dict.keys(): newkey = &amp;#39;/&amp;#39;.join([keyPrefix, key]) Dict[newkey] = Dict.pop(key) Result of code1/code2 is:
{&amp;#39;keyA/keyA/keyB&amp;#39; : &amp;#39;&amp;#39;, &amp;#39;keyA/keyA/keyA&amp;#39;: &amp;#39;&amp;#39;} It doesn&amp;rsquo;t work as expected, and I found the case only exists when prefix is the same to a key of the dict which means code1/code2 works well when the keyPrefix is neither ‘keyA’ nor ‘beyB’.</description></item></channel></rss>