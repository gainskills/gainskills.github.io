<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on Blog - uTIcARdI</title><link>https://blog.gainskills.top/tags/web/</link><description>Recent content in Web on Blog - uTIcARdI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gainskills.top/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode as an IDLE for Django</title><link>https://blog.gainskills.top/2019/11/15/vscode-as-idle-for-Django/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/11/15/vscode-as-idle-for-Django/</guid><description>This blog is about using MS VSCode as Django IDLE (OS: Mac OX, the steps are referenceable on Linux, Windows).
1. Download installation files and install MS VScode, Python from following links: MS VSCode
Python3
Optional: On Mac OS, I recommend homebrew for Python Installation because third party libraries&amp;rsquo; dependency will be processed smoothly.
Install homebrew:
/usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; Install Python3:</description></item><item><title>Post a file to Flask by Curl via API</title><link>https://blog.gainskills.top/2019/02/20/post-file-by-curl-to-flask-via-api/</link><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/02/20/post-file-by-curl-to-flask-via-api/</guid><description>Curl is widely used in command lines or scripts to transfer data.
Different ways to use curl to post a file to a web server with samples (from both client-side and server: Python-Flask side) will be discussed because it took me a while on the server-side to receiving the data from client.
I would like to add samples of Python-requests, Postman later.
Started with macOS Mojave Python 3.</description></item><item><title>Hugo-Customization</title><link>https://blog.gainskills.top/2019/02/06/hugo-customization/</link><pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/02/06/hugo-customization/</guid><description>A list about how I customize Hugo and why I did the change, the post will be updated continuously.
1. fractions Network Engineer should care about this, because it shows wrong IP/mask format with default value: fractions with default value Disable it in config.toml: [blackfriday] fractions = false
2. hrefTargetBlank This default value of the option is false which means external links(The wording was corrected to &amp;ldquo;absolute&amp;rdquo; from &amp;rsquo;external&amp;rsquo; on Hugo official doc).</description></item><item><title>Hugo-Versioning</title><link>https://blog.gainskills.top/2019/01/27/hugo-versioning/</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/27/hugo-versioning/</guid><description>Hugo provides the detail instructions about how to deploy it on different environment.
At first, I followed Deployment of Project Pages from /docs folder on master branch, and put all files in one repository.
I continue to check Deployment of Project Pages From Your gh-pages branch after I did some customization on hugo-theme-cleanwhite and want to publish the change to the forked branch.
Instead of the follow Hugo guide, I did some try myself.</description></item><item><title>Hugo-Images management</title><link>https://blog.gainskills.top/2019/01/25/post-img-mgmt-hugo/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/25/post-img-mgmt-hugo/</guid><description>I introduced why I migrate my blog to github and Hugo here. Most of articles have been moved to here in 30 days. Next, I just want to talk about something about posts&amp;rsquo; images management, versioning, theme customization/something about SEO.
Before start All images will be compressed before I upload them for the post. Many tools that could do this, such as tinypng, UPNG. My choice is Tinypng because it supports variety formats and its API.</description></item><item><title>aiohttp/aiodns-Resolving using custom nameservers</title><link>https://blog.gainskills.top/2019/01/23/try-aiohttp/</link><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/23/try-aiohttp/</guid><description>aiohttp is an Asynchronous HTTP client/server framework for asyncio and Python
I tried it because of the features:
Tuning the DNS cache Resolving using custom nameservers With this, verifying the CDN&amp;rsquo;s POPs with different ISPs&amp;rsquo; DNS on single a point should be possible.
Since the code on the official document is simple:
from aiohttp.resolver import AsyncResolver
resolver = AsyncResolver(nameservers=[&amp;ldquo;8.8.8.8&amp;rdquo;, &amp;ldquo;8.8.4.4&amp;rdquo;]) conn = aiohttp.TCPConnector(resolver=resolver)
I tried it with following code: ~~~python import aiohttp import asyncio from aiohttp.</description></item><item><title>Hello World</title><link>https://blog.gainskills.top/2019/01/01/hello-world/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/01/hello-world/</guid><description>Hello World!
Thanks
Hugo Git Page hugo-theme-cleanwhite I did some changes on the theme, will share it after testing. I spend days and finally get this Blog runs up. In the next days, will move the posts from WordPress: hanbaobao2005.WordPress.com to here.
Happy Holidays :-)
Update at Jan-26-2019:
I have been running blogs for years, started at NetEase(NetEase shut down its blog service at Nov-30-2018), then to Blogger(The blog was closed), and WordPress after Blogger was blocked within China.</description></item><item><title>Flask, Flask-WTF, Flask-Bootstrap, Select2, jinja2 integration</title><link>https://blog.gainskills.top/2018/04/16/flask-flask-wtf-flask-bootstrap-select2-jinja2-integration/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2018/04/16/flask-flask-wtf-flask-bootstrap-select2-jinja2-integration/</guid><description>I intend to acquire the Python skill on web after years&amp;rsquo; work on data processing, so I started with Flask by the following Miguel Grinberg&amp;rsquo;s instruction: The Flask Mega, you can learn how to integrate bootstrap with your project from it. After that, you can learn how to integrate select2 with your project by reading Flask Web开发:用Select2</description></item><item><title>30分钟上手Python网络爬虫</title><link>https://blog.gainskills.top/2018/01/30/30min-python-web-scrapper/</link><pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2018/01/30/30min-python-web-scrapper/</guid><description>原文链接: https://hackernoon.com/30-minute-python-web-scraper-39d6d038e5da 此翻译已经获得作者许可。对原文、本文任何形式的转载、引用，必须知会作者 我想用Python和Selenium做网络爬虫有一会了，但</description></item></channel></rss>