<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on Blog - uTIcARdI</title><link>https://blog.gainskills.top/tags/web/</link><description>Recent content in Web on Blog - uTIcARdI</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Aug 2025 18:51:32 +1200</lastBuildDate><atom:link href="https://blog.gainskills.top/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode as an IDLE for Django</title><link>https://blog.gainskills.top/2019/11/15/vscode-as-idle-for-Django/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/11/15/vscode-as-idle-for-Django/</guid><description>&lt;p>This blog is about using MS VSCode as Django IDLE (OS: Mac OX, the steps are referenceable on Linux, Windows).&lt;/p>
&lt;h5 id="1-download-installation-files-and-install-ms-vscode-python-from-following-links">1. Download installation files and install MS VScode, Python from following links:&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://code.visualstudio.com/download">MS VSCode&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.python.org/downloads/">Python3&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Optional:&lt;/strong> On Mac OS, I recommend &lt;a href="https://brew.sh/">homebrew&lt;/a> for Python Installation because third party libraries&amp;rsquo; dependency will be processed smoothly.&lt;/p>
&lt;p>Install &lt;code>homebrew&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>/usr/bin/ruby -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install &lt;code>Python3&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>brew install python@3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h5 id="2-python-extension">2. Python Extension&lt;/h5>
&lt;p>Launch VSCode and install the Extension: &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python&lt;/a>&lt;/p></description></item><item><title>Post a file to Flask by Curl via API</title><link>https://blog.gainskills.top/2019/02/20/post-file-by-curl-to-flask-via-api/</link><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/02/20/post-file-by-curl-to-flask-via-api/</guid><description>&lt;p>&lt;a href="https://curl.haxx.se/docs/manpage.html">Curl&lt;/a> is widely used in command lines or scripts to transfer data.&lt;br>
Different ways to use curl to post a file to a web server with samples (from both client-side and server: &lt;a href="http://flask.pocoo.org/">Python-Flask&lt;/a> side) will be discussed because it took me a while on the server-side to receiving the data from client.&lt;br>
I would like to add samples of &lt;a href="http://docs.python-requests.org/en/master/">Python-requests&lt;/a>, &lt;a href="https://www.getpostman.com/">Postman&lt;/a> later.&lt;/p>
&lt;ul>
&lt;li>
&lt;h5 id="started-with">Started with&lt;/h5>
&lt;ul>
&lt;li>macOS Mojave&lt;/li>
&lt;li>Python 3.7.2&lt;/li>
&lt;li>Flask 1.0.2&lt;/li>
&lt;li>Flask-RESTful 0.3.7&lt;/li>
&lt;li>curl 7.54.0 (x86_64-apple-darwin18.0)&lt;/li>
&lt;/ul>
&lt;p>The Flask code:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Py file name: simple.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> flask &lt;span style="color:#f92672">import&lt;/span> Flask, request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> flask_restful &lt;span style="color:#f92672">import&lt;/span> Api, Resource, reqparse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> werkzeug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> Flask(__name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api &lt;span style="color:#f92672">=&lt;/span> Api(app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">kzwebfile&lt;/span>(Resource):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">post&lt;/span>(self, filename):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api&lt;span style="color:#f92672">.&lt;/span>add_resource(kzwebfile, &lt;span style="color:#e6db74">&amp;#39;/&amp;lt;string:filename&amp;gt;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app&lt;span style="color:#f92672">.&lt;/span>run()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p></description></item><item><title>Hugo-Customization</title><link>https://blog.gainskills.top/2019/02/06/hugo-customization/</link><pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/02/06/hugo-customization/</guid><description>&lt;p>A list about how I customize Hugo and why I did the change, the post will be updated continuously.&lt;/p>
&lt;h3 id="1-fractions">1. &lt;a href="https://gohugo.io/getting-started/configuration/">fractions&lt;/a>&lt;/h3>
&lt;p>Network Engineer should care about this, because it shows wrong &lt;em>IP/mask&lt;/em> format with default value:















&lt;div align="center">
 &lt;figure style="padding: 0.8rem; margin: 2rem 0; border: thin #c0c0c0 solid; border-radius: 10px; width: 310px; max-width: 88%; ">
 &lt;a href="https://blog.gainskills.top/img/postimgs/2019/02/01-opt_hu_197622209dbd8d69.png" data-fancybox data-caption=fractions&amp;#32;with&amp;#32;default&amp;#32;value >
 &lt;img data-src="https://blog.gainskills.top/img/postimgs/2019/02/01-opt_hu_32e1677037f5416.png" class="img-responsive img-lazyload" alt=fractions&amp;#32;with&amp;#32;default&amp;#32;value style="height: 140px;"/>
 &lt;/a>
 &lt;figcaption class="text-capitalize">
 &lt;small>fractions with default value&lt;/small>
 &lt;/figcaption>
 &lt;/figure>
&lt;/div>

Disable it in config.toml:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">blackfriday&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fractions&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;h3 id="2-hreftargetblank">2. hrefTargetBlank&lt;/h3>
&lt;p>This default value of the option is &lt;code>false&lt;/code> which means external links(The wording was corrected to &amp;ldquo;absolute&amp;rdquo; from &amp;rsquo;external&amp;rsquo; on Hugo official doc).
I prefer to change the value to &lt;code>true&lt;/code>.&lt;/p></description></item><item><title>Hugo-Versioning</title><link>https://blog.gainskills.top/2019/01/27/hugo-versioning/</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/27/hugo-versioning/</guid><description>&lt;p>Hugo provides the detail &lt;a href="https://gohugo.io/hosting-and-deployment/">instructions&lt;/a> about how to deploy it on different environment.&lt;/p>
&lt;p>At first, I followed &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#deployment-of-project-pages-from-docs-folder-on-master-branch">Deployment of Project Pages from /docs folder on master branch&lt;/a>, and put all files in one repository.&lt;/p>
&lt;p>I continue to check &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#deployment-of-project-pages-from-your-gh-pages-branch">Deployment of Project Pages From Your gh-pages branch&lt;/a> after I did some customization on &lt;a href="https://themes.gohugo.io/hugo-theme-cleanwhite/">hugo-theme-cleanwhite&lt;/a> and want to publish the change to the &lt;a href="https://github.com/gainskills/hugo-theme-cleanwhite">forked branch&lt;/a>.&lt;/p>
&lt;p>Instead of the follow Hugo guide, I did some try myself. I searched &amp;ldquo;change a subfolder to another repository and found the article: &lt;a href="http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/">Moving Files from one Git Repository to Another, Preserving History&lt;/a> but its case is:&lt;/p></description></item><item><title>Hugo-Images management</title><link>https://blog.gainskills.top/2019/01/25/post-img-mgmt-hugo/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/25/post-img-mgmt-hugo/</guid><description>&lt;p>I introduced &lt;a href="2019/01/01/hello-world/">why&lt;/a> I migrate my blog to github and Hugo here. Most of articles have been moved to here in 30 days. Next, I just want to talk about something about &lt;a href="https://blog.gainskills.top/2019/01/25/post-img-mgmt-hugo/">posts&amp;rsquo; images management&lt;/a>, &lt;a href="https://blog.gainskills.top/2019/01/27/hugo-versioning/">versioning&lt;/a>, &lt;a href="https://blog.gainskills.top/2019/02/07/hugo-customization/">theme customization/something about SEO&lt;/a>.&lt;/p>
&lt;h3 id="before-start">Before start&lt;/h3>
&lt;p>All images will be compressed before I upload them for the post. Many tools that could do this, such as &lt;a href="https://tinypng.com/">tinypng&lt;/a>, &lt;a href="http://upng.photopea.com/">UPNG&lt;/a>. My choice is Tinypng because it supports variety formats and its &lt;a href="https://tinypng.com/developers/reference#%7Btpath(%22/developers%22)%7D">API&lt;/a>.&lt;/p>















&lt;div align="center">
 &lt;figure style="padding: 0.8rem; margin: 2rem 0; border: thin #c0c0c0 solid; border-radius: 10px; width: 1362px; max-width: 88%; ">
 &lt;a href="https://blog.gainskills.top/img/postimgs/2019/01/01-opt_hu_7d302392f7ee3c76.png" data-fancybox data-caption=img&amp;#32;compression&amp;#32;(20M&amp;#32;to&amp;#32;5.1M) >
 &lt;img data-src="https://blog.gainskills.top/img/postimgs/2019/01/01-opt_hu_e75b43c94fbfd0e8.png" class="img-responsive img-lazyload" alt=img&amp;#32;compression&amp;#32;(20M&amp;#32;to&amp;#32;5.1M) style="height: 400px;"/>
 &lt;/a>
 &lt;figcaption class="text-capitalize">
 &lt;small>img compression (20M to 5.1M)&lt;/small>
 &lt;/figcaption>
 &lt;/figure>
&lt;/div>

&lt;p>Tinypng&amp;rsquo;s APIs can be called by &lt;a href="http://docs.python-requests.org/en/master/">Python-Requests&lt;/a> in this way:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> os &lt;span style="color:#f92672">import&lt;/span> path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> requests.auth &lt;span style="color:#f92672">import&lt;/span> HTTPBasicAuth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">picopt&lt;/span>(root_path, apikey):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> f &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>listdir(root_path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fullurl &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>sep&lt;span style="color:#f92672">.&lt;/span>join([root_path, f])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> path&lt;span style="color:#f92672">.&lt;/span>isdir(fullurl):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> picopt(fullurl, apikey)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> fullurl&lt;span style="color:#f92672">.&lt;/span>endswith((&lt;span style="color:#e6db74">&amp;#39;.DS_Store&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-opt.png&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-opt.jpg&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-opt.jpeg&amp;#39;&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;ignore &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> fullurl)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;processing &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> fullurl)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(fullurl, &lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> imgf:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#f92672">=&lt;/span> imgf&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth&lt;span style="color:#f92672">=&lt;/span>HTTPBasicAuth(&lt;span style="color:#e6db74">&amp;#34;api:&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>(apikey), &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>), url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;https://api.tinify.com/shrink&amp;#39;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(res&lt;span style="color:#f92672">.&lt;/span>json())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> optimgurl &lt;span style="color:#f92672">=&lt;/span> res&lt;span style="color:#f92672">.&lt;/span>json()[&lt;span style="color:#e6db74">&amp;#39;output&amp;#39;&lt;/span>][&lt;span style="color:#e6db74">&amp;#39;url&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># print(optimgurl)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth&lt;span style="color:#f92672">=&lt;/span>HTTPBasicAuth(&lt;span style="color:#e6db74">&amp;#34;api:&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span>(apikey), &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>), url&lt;span style="color:#f92672">=&lt;/span>optimgurl)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename, filetypestr &lt;span style="color:#f92672">=&lt;/span> fullurl&lt;span style="color:#f92672">.&lt;/span>rsplit(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> optfullurl &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-opt.&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([filename, filetypestr])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(optfullurl, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fd:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> chunk &lt;span style="color:#f92672">in&lt;/span> res&lt;span style="color:#f92672">.&lt;/span>iter_content(chunk_size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">128&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fd&lt;span style="color:#f92672">.&lt;/span>write(chunk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;optimized img file: &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> fullurl)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devkey &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> postimgsfolder &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> picopt(postimgsfolder, devkey)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p></description></item><item><title>aiohttp/aiodns-Resolving using custom nameservers</title><link>https://blog.gainskills.top/2019/01/23/try-aiohttp/</link><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/23/try-aiohttp/</guid><description>&lt;p>&lt;a href="https://github.com/aio-libs/aiohttp">aiohttp&lt;/a> is an Asynchronous HTTP client/server framework for asyncio and Python&lt;/p>
&lt;p>I tried it because of the features:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aiohttp.readthedocs.io/en/stable/client_advanced.html#tuning-the-dns-cache">Tuning the DNS cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aiohttp.readthedocs.io/en/stable/client_advanced.html#resolving-using-custom-nameservers">Resolving using custom nameservers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>With this, verifying the CDN&amp;rsquo;s POPs with different ISPs&amp;rsquo; DNS on single a point should be possible.&lt;/p>
&lt;p>Since the code on the official document is simple:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>from aiohttp.resolver import AsyncResolver&lt;/p>
&lt;p>resolver = AsyncResolver(nameservers=[&amp;ldquo;8.8.8.8&amp;rdquo;, &amp;ldquo;8.8.4.4&amp;rdquo;])
conn = aiohttp.TCPConnector(resolver=resolver)&lt;/p>
&lt;pre tabindex="0">&lt;code>
I tried it with following code:

~~~python
import aiohttp
import asyncio
from aiohttp.resolver import AsyncResolver

resolver = AsyncResolver(nameservers=[&amp;#34;114.114.114.114&amp;#34;])

async def dnstesting():
 async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(verify_ssl=False, use_dns_cache=False, resolver=resolver)) as session:
 r = await session.get(&amp;#34;http://google.com&amp;#34;)
 print(r.text)

asyncio.run(dnstesting())
&lt;/code>&lt;/pre>&lt;p>Run with following error:&lt;/p></description></item><item><title>Hello World</title><link>https://blog.gainskills.top/2019/01/01/hello-world/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2019/01/01/hello-world/</guid><description>&lt;p>Hello World!&lt;/p>
&lt;p>Thanks&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/">Hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pages.github.com/">Git Page&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/zhaohuabing/hugo-theme-cleanwhite">hugo-theme-cleanwhite&lt;/a>
I did some changes on the theme, will share it after testing.&lt;/li>
&lt;/ul>
&lt;p>I spend days and finally get this Blog runs up. In the next days, will move the posts from WordPress: &lt;a href="http://hanbaobao2005.WordPress.com">hanbaobao2005.WordPress.com&lt;/a> to here.&lt;/p>
&lt;p>Happy Holidays :-)&lt;/p>
&lt;hr>
&lt;p>Update at Jan-26-2019:&lt;/p>
&lt;p>I have been running blogs for years, started at &lt;a href="https://blog.163.com/excellent_2008">NetEase&lt;/a>(NetEase shut down its blog service at Nov-30-2018), then to &lt;a href="http://69444091.blogspot.com/">Blogger&lt;/a>(The blog was closed), and &lt;a href="http://hanbaobao2005.WordPress.com">WordPress&lt;/a> after Blogger was blocked within China. I setup the blog on &lt;a href="https://pages.github.com/">Git Page&lt;/a> and &lt;a href="https://gohugo.io/">Hugo&lt;/a> because I still unable to get used to the WordPress editor even I have used it for more than 2 years.&lt;/p></description></item><item><title>Flask, Flask-WTF, Flask-Bootstrap, Select2, jinja2 integration</title><link>https://blog.gainskills.top/2018/04/16/flask-flask-wtf-flask-bootstrap-select2-jinja2-integration/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2018/04/16/flask-flask-wtf-flask-bootstrap-select2-jinja2-integration/</guid><description>&lt;p>I intend to acquire the Python skill on web after years&amp;rsquo; work on data processing, so I started with &lt;a href="http://flask.pocoo.org/">Flask&lt;/a> by the following Miguel &lt;a href="https://blog.miguelgrinberg.com/author/Miguel%20Grinberg">Grinberg&amp;rsquo;s instruction&lt;/a>: &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">The Flask Mega&lt;/a>, you can learn how to integrate bootstrap with your project from it.&lt;/p>
&lt;p>After that, you can learn how to integrate select2 with your project by reading &lt;a href="https://blog.csdn.net/zheng_integer/article/details/59507942">Flask Web开发:用Select2实现类似知乎的标签系统&lt;/a> as a guide.&lt;/p></description></item><item><title>30分钟上手Python网络爬虫</title><link>https://blog.gainskills.top/2018/01/30/30min-python-web-scrapper/</link><pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.gainskills.top/2018/01/30/30min-python-web-scrapper/</guid><description>&lt;p>原文链接: &lt;a href="https://hackernoon.com/30-minute-python-web-scraper-39d6d038e5da">https://hackernoon.com/30-minute-python-web-scraper-39d6d038e5da&lt;/a>&lt;/p>
&lt;p>此翻译已经获得作者许可。对原文、本文任何形式的转载、引用，必须知会作者&lt;/p>
&lt;p>我想用Python和&lt;a href="http://www.seleniumhq.org/">Selenium&lt;/a>做网络爬虫有一会了，但是一直没有实施。几天之前，我决定小试一下。看起来令人望而却步，但实现代码从&lt;a href="https://unsplash.com/">Unsplash&lt;/a>抓取一些漂亮的图片却是相当容易的。&lt;/p>
&lt;h4 id="简易图片爬虫的食材">简易图片爬虫的食材&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://www.python.org/downloads/">Python&lt;/a>(3.6.3或更新的版本)&lt;/li>
&lt;li>&lt;a href="https://www.jetbrains.com/pycharm/download/#section=windows">Pycharm&lt;/a>(社区版就够了)&lt;/li>
&lt;li>pip install &lt;a href="http://docs.python-requests.org/en/master/user/install/#install">requests&lt;/a> &lt;a href="https://pillow.readthedocs.io/en/latest/installation.html#basic-installation">Pillow&lt;/a> &lt;a href="http://selenium-python.readthedocs.io/installation.html#downloading-python-bindings-for-selenium">selenium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mozilla/geckodriver/releases/latest">geckodriver&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mozilla.org/en-US/firefox/new/">Mozlla Firefox&lt;/a>&lt;/li>
&lt;li>互联网&lt;/li>
&lt;li>30分钟(或更少）&lt;/li>
&lt;/ul>
&lt;p>*译者注：&lt;/p></description></item></channel></rss>